/**
 * Represents a successful result
 * @public
 */
interface OkResult<T> {
    ok: true;
    value: T;
    error?: undefined;
}
/**
 * Represents a failure result
 * @public
 */
interface ErrResult<E, ErrorExtras = unknown> {
    ok: false;
    error: E;
    value?: undefined;
    errorExtras?: ErrorExtras;
}

declare class Client {
    private _dbUrl;
    private lastDbUrlRefreshTime;
    /**
     * Initiates Class.
     * @param {String} dbUrl Custom database URL
     */
    constructor(dbUrl?: string);
    private get dbUrl();
    /**
     * Gets a key
     * @param {String} key Key
     * @param {boolean} [options.raw=false] Makes it so that we return the raw string value. Default is false.
     */
    get(key: string, options?: {
        raw: boolean;
    }): Promise<OkResult<any> | ErrResult<RequestError>>;
    /**
     * Sets a key
     * @param {String} key Key
     * @param {any} value Value
     */
    set(key: string, value: any): Promise<OkResult<this> | ErrResult<RequestError, unknown>>;
    /**
     * Deletes a key
     * @param {String} key Key
     */
    delete(key: string): Promise<OkResult<this> | ErrResult<RequestError, unknown>>;
    /**
     * List key starting with a prefix if provided. Otherwise list all keys.
     * @param {String} prefix The prefix to filter by.
     */
    list(prefix?: string): Promise<OkResult<string[]> | ErrResult<RequestError, unknown>>;
    /**
     * Clears the database.
     * @returns a Promise containing this
     */
    empty(): Promise<ErrResult<RequestError, unknown> | OkResult<this> | ErrResult<{
        message: string;
    }, (RequestError | undefined)[]>>;
    /**
     * Get all key/value pairs and return as an object
     * @param {boolean} [options.raw=false] Makes it so that we return the raw
     * string value for each key. Default is false.
     */
    getAll(options?: {
        raw: boolean;
    }): Promise<ErrResult<RequestError, unknown> | OkResult<Record<string, string | null>>>;
    /**
     * Sets multiple keys from an object.
     * @param {Object} obj The object.
     */
    setMultiple(obj: Record<string, any>): Promise<OkResult<this> | ErrResult<{
        message: string;
    }, (RequestError | undefined)[]>>;
    /**
     * Delete multiple entries by key.
     * @param {Array<string>} args Keys
     */
    deleteMultiple(...args: Array<string>): Promise<OkResult<this> | ErrResult<{
        message: string;
    }, (RequestError | undefined)[]>>;
}
interface RequestError {
    message: string;
    statusCode?: number;
}

export { Client as default };
