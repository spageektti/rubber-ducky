import { Item } from './Item.js'
import Search from './Search.js'
import fetch from 'node-fetch'

const URL = process.env.REPLIT_DB_URL;

function getId (str) {
  const regex = /(?<=_)([0-9]*?)$/;
  return regex.exec(str)[0];
}

async function getValue(key) {
  try {
    return await fetch(`${URL}/${key}`)
      .then((e) => e.json())
      .then(json => json);
  } catch (err) {
    return null;
  }
}

async function deleteKey(key) {
  return await fetch(`${URL}/${key}`, { method: "DELETE" })
      .then(() => true);
}

function applyItem (item, name, scheme) {
  item.prototype.getType = () => name;
  item.prototype.getScheme = () => scheme;
    
  item.findById = async (id) => {
    const data = await getValue(`${name}_${id}`);
    if (data !== null) {
      return new item(data, id);
    }
    return null;
  }

  item.listKeys = async () => {
    return await fetch(`${URL}?encode=true&prefix=${encodeURIComponent(name + '_')}`)
      .then((r) => r.text())
      .then((t) => {
        if (t.length === 0) return [];
        return t.split('\n').map(decodeURIComponent);
      });
  }

  item.listIds = async () => {
    return await fetch(`${URL}?encode=true&prefix=${encodeURIComponent(name + '_')}`)
      .then((r) => r.text())
      .then((t) => {
        if (t.length === 0) return [];
        return t.split('\n').map(decodeURIComponent).map(getId)
      });
  }

  item.exec = async ({ where = {}, limit = Infinity, offset = 0 } = {}) => {
    const keys = await item.listKeys();
    const results = [];
    
    keys.splice(0, offset);

    for (const key of keys) {
      const data = await getValue(key);
          
      if (Search(where, data)) {
        results.push({ key, value: data });
        if (results.length === limit) {
          break;
        }
      }
    }

    return results;
  }

  item.list = async (query) => {
    return await item.exec(query)
      .then(items => items.map(i => new item(i.value, getId(i.key))));
  }

  item.deleteById = async (id) => {
    return await deleteKey(name + '_' + id);
  }

  item.deleteMany = async (query) => {
    const items = await item.exec(query)
    const promises = [];
        
    for (const i of items) {
      promises.push(deleteKey(i.key))
    }

    await Promise.all(promises);

    return true;
  }
  
  item.deleteAll = async () => {
    const keys = await item.listKeys();
    const promises = [];
    
    for (const key of keys) {
      promises.push(deleteKey(key));
    }

    await Promise.all(promises);

    return true;
  }

  item.find = async (query) => {
    return await item.exec(query)
      .then(items => 
        items.map(i => new item(i.value, getId(i.key)))
      );
  }

  item.findOne = async (query) => {
    return await item.exec({ limit: 1, ...query})
      .then(items => 
        items[0] ? new item(items[0].value, getId(items[0].key)) : null
      );
  }

  item.count = async (query, callback) => {
    return await item.listKeys().then(i => i.length)
  }

  item.findOneAndUpdate = async (query, newInfos) => {
    const i = await item.findOne(query);
    if (!i) return null;
    i.update(newInfos);
    await i.save();
    return i;
  }
  
  return item;
}



export class Client {
  
  constructor(key) {
    this.url = key ? key : process.env.REPLIT_DB_URL;
    this.schemes = {};
  }
  
  addSchema (name, schema) {
    if (!schema || !schema.getScheme) return false;
    name = name.toLowerCase();
    return applyItem(Item, name, schema.getScheme());
  }

  async list (prefix = '') {
    return await fetch(`${URL}?encode=true&prefix=${encodeURIComponent(prefix)}`)
      .then((r) => r.text())
      .then((t) => {
        if (t.length === 0) {
          return [];
        }
        return t.split("\n").map(decodeURIComponent);
      });
  }
  
  async clear () {
    const promises = [];
    
    for (const key of await this.list()) {
      promises.push(deleteKey(key));
    }

    await Promise.all(promises);

    return this;
  }
  
}