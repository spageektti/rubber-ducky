function isObject(v) {
  return (
    typeof v === 'object' &&
    !Array.isArray(v) &&
    v !== null
  );
}

function getDefault (type) {
  switch (type) {
    case 'string':
      return '';
    case 'boolean':
      return null;
    case 'number':
      return 0;
    case 'object':
      return {};
  }
}

export class Schema {
  constructor (obj) {
    this.scheme = {};
    for (var i in obj) {
      if (isObject(obj[i])) {
        const type = obj[i].type.toLowerCase() || 'string';
        this.scheme[i] = {
          type: type,
          default: obj[i].default || getDefault(type),
          required: obj[i].required || false
        }
      } else if (typeof i === 'string') {
        this.scheme[i] = {
          type: i.toLowerCase(),
          default: '',
          required: false
        }
      }
    }
  }
  getScheme () {
    return this.scheme;
  }
}