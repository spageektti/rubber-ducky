import fetch from 'node-fetch'

export class Item {
  
  constructor (obj, id = false) {
    this.value = {};
    this._id = id || Date.now();
    this.key = this.getType() + '_' + this._id;

    this.update(obj);
  }

  update (obj = {}) {
    const newValue = {};
    
    const scheme = this.getScheme();
    for (var i in scheme) {
      if (obj[i] && typeof obj[i] === scheme[i].type) {
        newValue[i] = obj[i];
      } else if (scheme[i].default) {
        newValue[i] = scheme[i].default;
      } else if(scheme[i].required && !this.value[i]) {
        console.log(`Error: the "${i}" key is required.`);
        return false;
      }
    }

    this.value = Object.assign(this.value, newValue);
  }
  
  async save () {
    const value = JSON.stringify(this.value);
    return await fetch(process.env.REPLIT_DB_URL, {
      method: "POST",
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
      body: encodeURIComponent(this.key) + "=" + encodeURIComponent(value),
    }).then(() => this);
  }

  async delete () {
    return await fetch(`${URL}/${this.key}`, { method: "DELETE" })
      .then(() => true);
  }

  getId () {
    return this._id;
  }

  getKey () {
    return this.key;
  }

  getValue () {
    return this.value;
  }
}
